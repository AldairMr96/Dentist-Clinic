package com.company.bazar.service;import com.company.bazar.dto.CreateSaleDTO;import com.company.bazar.dto.MaxSaleDTO;import com.company.bazar.dto.ProductSaleDTO;import com.company.bazar.dto.SaleDTO;import com.company.bazar.model.Client;import com.company.bazar.model.Product;import com.company.bazar.model.Sale;import com.company.bazar.model.SaleProduct;import com.company.bazar.repository.IClientRepository;import com.company.bazar.repository.IProductRepository;import com.company.bazar.repository.ISaleProductRepository;import com.company.bazar.repository.ISaleRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.sql.DatabaseMetaData;import java.time.LocalDate;import java.util.ArrayList;import java.util.Comparator;import java.util.List;import java.util.stream.Collectors;@Servicepublic class SaleService implements ISaleService {    @Autowired    ISaleRepository saleRepository;    @Autowired    IClientRepository clientRepository;    @Autowired    IProductRepository productRepository;    @Autowired    ISaleProductRepository saleProductRepository;    @Override    public void createSale(CreateSaleDTO sale) {        Client client = clientRepository.findById(sale.getIdClient()).orElse(null);        Sale newSale = new Sale();        newSale.setClient(client);        newSale.setSaleDate(LocalDate.now());        newSale = saleRepository.save(newSale);        double acu = 0;        for (ProductSaleDTO productSaleRequest : sale.getProductList()) {            Product product = productRepository.findById(productSaleRequest.getProductId()).orElse(null);            SaleProduct saleProduct = new SaleProduct();            saleProduct.setSale(newSale);            saleProduct.setProduct(product);            saleProduct.setQuantity(productSaleRequest.getQuantity());            saleProductRepository.save(saleProduct);            acu += (saleProduct.getQuantity() * product.getCost());        }        newSale.setTotalSale(acu);        saleRepository.save(newSale);        //newSale.setProducts(productList);    }    @Override    public List<Sale> getSales() {        List<Sale> saleList = saleRepository.findAll();        return saleList;    }    @Override    public Sale findSale(Long codSale) {        return saleRepository.findById(codSale).orElse(null);    }    @Override    public void deleteSale(Long codSale) {        saleRepository.deleteById(codSale);    }    @Override    public void editSale(CreateSaleDTO sale) {        this.createSale(sale);    }    @Override    public List<String> findProductSale(Long codSale) {        Sale sale =  this.findSale(codSale);        List<SaleProduct> producSaletList = sale.getProducts();        List<String> productListName = producSaletList.stream()                .map(saleProduct -> saleProduct.getProduct().getNameProduct())                .collect(Collectors.toList());       return productListName;    }    @Override    public SaleDTO totalSale(LocalDate dateSale) {        List<Sale> sales = saleRepository.findBySaleDate(dateSale);        double totalSales = sales.stream().mapToDouble(Sale::getTotalSale).sum();        List<Long> saleIds = sales.stream().map(Sale::getCodSale).toList();        List<SaleProduct> saleProducts = saleProductRepository.findBySale_CodSaleIn(saleIds);        SaleDTO saleDTO = new SaleDTO(totalSales, saleProducts.size());        return saleDTO;    }    @Override    public MaxSaleDTO saleMajor() {       Sale sale=  saleRepository.findSaleWithMaxTotal();       MaxSaleDTO maxSaleDTO = new MaxSaleDTO(sale.getCodSale(),              sale.getTotalSale(),              sale.getProducts().size(),              sale.getClient().getNameClient(),              sale.getClient().getLastnameClient()              );        return maxSaleDTO;    }}