package com.company.bazar.service;import com.company.bazar.dto.MaxSaleDTO;import com.company.bazar.dto.SaleDTO;import com.company.bazar.model.Product;import com.company.bazar.model.Sale;import com.company.bazar.repository.ISaleRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.time.LocalDate;import java.util.Comparator;import java.util.List;import java.util.stream.Collectors;@Servicepublic class SaleService implements ISaleService {    @Autowired    ISaleRepository saleRepository;    @Override    public void createSale(Sale sale) {        saleRepository.save(sale);    }    @Override    public List<Sale> getSales() {        List<Sale> saleList = saleRepository.findAll();        return saleList;    }    @Override    public Sale findSale(Long codSale) {        return saleRepository.findById(codSale).orElse(null);    }    @Override    public void deleteSale(Long codSale) {        saleRepository.deleteById(codSale);    }    @Override    public void editSale(Sale sale) {        this.createSale(sale);    }    @Override    public List<Product> findProductSale(Long codSale) {       Sale sale=  this.findSale(codSale);        return sale.getProductList();    }    @Override    public SaleDTO totalSale(LocalDate dateSale) {        List<Sale> saleList = saleRepository.findAll();      //Filter for date        List<Sale> filterSales = saleList.stream()                .filter( sale -> sale.getSaleDate().equals(dateSale) )                .collect(Collectors.toList());        //Calculate sum totals        double sumTotalSales = filterSales.stream()                .mapToDouble(Sale::getTotal)                .sum();        //Size for the filter sales        int salesQuantity = filterSales.size();        return new SaleDTO(sumTotalSales, salesQuantity);    }    @Override    public MaxSaleDTO saleMajor() {        List<Sale> saleList = this.getSales();        //Find max sale use Stream        Sale maxSale = saleList.stream()                .max(Comparator.comparingDouble(Sale::getTotal))                .orElseThrow(()-> new RuntimeException("No sale Found"));        //  Get the quantity of products and customer data        int productCount = maxSale.getProductList()!=null? maxSale.getProductList().size() :0;        String clientName = maxSale.getClient().getNameClient();        String clientLastname = maxSale.getClient().getLastnameClient();        MaxSaleDTO  maxSaleDTO = new MaxSaleDTO(maxSale.getCodSale(), maxSale.getTotal(), productCount, clientName, clientLastname);        return maxSaleDTO;    }}